module gcalendar.models.event;

import std.json;
import std.datetime : SysTime;
import common.common;
import vibe.data.json : optional;

public struct Event {
	/** Information about the event's reminders for the authenticated user.*/
	private static const string REMINDERS = "reminders";
	public struct Reminders {
		/** Whether the default reminders of the calendar apply to the event.*/
		private static const string USEDEFAULT = "useDefault";
		bool _useDefault;
		mixin(GetterSetter!("bool", "Reminders")(USEDEFAULT));

		/** If the event doesn't use the default reminders, this lists the reminders specific to the event, or, if not set, indicates that no reminders are set for this event. The maximum number of override reminders is 5.*/
		private static const string OVERRIDES = "overrides";
		import gcalendar.models.eventreminder;
		EventReminder[] _overrides;
		mixin(GetterSetter!("EventReminder[]", "Reminders")(OVERRIDES));

	}

	/** Whether anyone can invite themselves to the event (currently works for Google+ events only). Optional. The default is False.*/
	private static const string ANYONECANADDSELF = "anyoneCanAddSelf";
	@optional bool _anyoneCanAddSelf;
	mixin(GetterSetter!("bool", "Event")(ANYONECANADDSELF));

	/** Opaque identifier of the event. When creating new single or recurring events, you can specify their IDs. Provided IDs must follow these rules:  
- characters allowed in the ID are those used in base32hex encoding, i.e. lowercase letters a-v and digits 0-9, see section 3.1.2 in RFC2938 
- the length of the ID must be between 5 and 1024 characters 
- the ID must be unique per calendar  Due to the globally distributed nature of the system, we cannot guarantee that ID collisions will be detected at event creation time. To minimize the risk of collisions we recommend using an established UUID algorithm such as one described in RFC4122.
If you do not specify an ID, it will be automatically generated by the server.
Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.*/
	private static const string ID = "id";
	string _id;
	mixin(GetterSetter!("string", "Event")(ID));

	/** Whether attendees other than the organizer can modify the event. Optional. The default is False.*/
	private static const string GUESTSCANMODIFY = "guestsCanModify";
	@optional bool _guestsCanModify;
	mixin(GetterSetter!("bool", "Event")(GUESTSCANMODIFY));

	/** The organizer of the event. If the organizer is also an attendee, this is indicated with a separate entry in attendees with the organizer field set to True. To change the organizer, use the move operation. Read-only, except when importing an event.*/
	private static const string ORGANIZER = "organizer";
	public struct Organizer {
		/** Whether the organizer corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.*/
		private static const string SELF = "self";
		bool _self;
		mixin(GetterSetter!("bool", "Organizer")(SELF));

		/** The organizer's email address, if available. It must be a valid email address as per RFC5322.*/
		private static const string EMAIL = "email";
		@optional string _email;
		mixin(GetterSetter!("string", "Organizer")(EMAIL));

		/** The organizer's Profile ID, if available. It corresponds to the id field in the People collection of the Google+ API*/
		private static const string ID = "id";
		@optional string _id;
		mixin(GetterSetter!("string", "Organizer")(ID));

		/** The organizer's name, if available.*/
		private static const string DISPLAYNAME = "displayName";
		@optional string _displayName;
		mixin(GetterSetter!("string", "Organizer")(DISPLAYNAME));

	}

	/** If set to True, Event propagation is disabled. Note that it is not the same thing as Private event properties. Optional. Immutable. The default is False.*/
	private static const string PRIVATECOPY = "privateCopy";
	@optional bool _privateCopy;
	mixin(GetterSetter!("bool", "Event")(PRIVATECOPY));

	/** The attendees of the event. See the Events with attendees guide for more information on scheduling events with other calendar users. Service accounts need to use domain-wide delegation of authority to populate the attendee list.*/
	private static const string ATTENDEES = "attendees";
	import gcalendar.models.eventattendee;
	EventAttendee[] _attendees;
	mixin(GetterSetter!("EventAttendee[]", "Event")(ATTENDEES));

	/** Creation time of the event (as a RFC3339 timestamp). Read-only.*/
	private static const string CREATED = "created";
	string _created;
	mixin(GetterSetter!("string", "Event")(CREATED));

	/** The (exclusive) end time of the event. For a recurring event, this is the end time of the first instance.*/
	private static const string END = "end";
	import gcalendar.models.eventdatetime;
	EventDateTime _end;
	mixin(GetterSetter!("EventDateTime", "Event")(END));

	/** Title of the event.*/
	private static const string SUMMARY = "summary";
	string _summary;
	mixin(GetterSetter!("string", "Event")(SUMMARY));

	/** ETag of the resource.*/
	private static const string ETAG = "etag";
	string _etag;
	mixin(GetterSetter!("string", "Event")(ETAG));

	/** Whether attendees other than the organizer can see who the event's attendees are. Optional. The default is True.*/
	private static const string GUESTSCANSEEOTHERGUESTS = "guestsCanSeeOtherGuests";
	@optional bool _guestsCanSeeOtherGuests;
	mixin(GetterSetter!("bool", "Event")(GUESTSCANSEEOTHERGUESTS));

	/** For an instance of a recurring event, this is the time at which this event would start according to the recurrence data in the recurring event identified by recurringEventId. It uniquely identifies the instance within the recurring event series even if the instance was moved to a different time. Immutable.*/
	private static const string ORIGINALSTARTTIME = "originalStartTime";
	EventDateTime _originalStartTime;
	mixin(GetterSetter!("EventDateTime", "Event")(ORIGINALSTARTTIME));

	/** Type of the resource ("calendar#event").*/
	private static const string KIND = "kind";
	string _kind;
	mixin(GetterSetter!("string", "Event")(KIND));

	/** Whether this is a locked event copy where no changes can be made to the main event fields "summary", "description", "location", "start", "end" or "recurrence". The default is False. Read-Only.*/
	private static const string LOCKED = "locked";
	bool _locked;
	mixin(GetterSetter!("bool", "Event")(LOCKED));

	/** Whether attendees may have been omitted from the event's representation. When retrieving an event, this may be due to a restriction specified by the maxAttendee query parameter. When updating an event, this can be used to only update the participant's response. Optional. The default is False.*/
	private static const string ATTENDEESOMITTED = "attendeesOmitted";
	@optional bool _attendeesOmitted;
	mixin(GetterSetter!("bool", "Event")(ATTENDEESOMITTED));

	/** Source from which the event was created. For example, a web page, an email message or any document identifiable by an URL with HTTP or HTTPS scheme. Can only be seen or modified by the creator of the event.*/
	private static const string SOURCE = "source";
	public struct Source {
		/** Title of the source; for example a title of a web page or an email subject.*/
		private static const string TITLE = "title";
		string _title;
		mixin(GetterSetter!("string", "Source")(TITLE));

		/** URL of the source pointing to a resource. The URL scheme must be HTTP or HTTPS.*/
		private static const string URL = "url";
		string _url;
		mixin(GetterSetter!("string", "Source")(URL));

	}

	/** Visibility of the event. Optional. Possible values are:  
- "default" - Uses the default visibility for events on the calendar. This is the default value. 
- "public" - The event is public and event details are visible to all readers of the calendar. 
- "private" - The event is private and only event attendees may view event details. 
- "confidential" - The event is private. This value is provided for compatibility reasons.*/
	private static const string VISIBILITY = "visibility";
	@optional string _visibility;
	mixin(GetterSetter!("string", "Event")(VISIBILITY));

	/** Event unique identifier as defined in RFC5545. It is used to uniquely identify events accross calendaring systems and must be supplied when importing events via the import method.
Note that the icalUID and the id are not identical and only one of them should be supplied at event creation time. One difference in their semantics is that in recurring events, all occurrences of one event have different ids while they all share the same icalUIDs.*/
	private static const string ICALUID = "iCalUID";
	string _iCalUID;
	mixin(GetterSetter!("string", "Event")(ICALUID));

	/** Whether the event blocks time on the calendar. Optional. Possible values are:  
- "opaque" - Default value. The event does block time on the calendar. This is equivalent to setting Show me as to Busy in the Calendar UI. 
- "transparent" - The event does not block time on the calendar. This is equivalent to setting Show me as to Available in the Calendar UI.*/
	private static const string TRANSPARENCY = "transparency";
	@optional string _transparency;
	mixin(GetterSetter!("string", "Event")(TRANSPARENCY));

	/** File attachments for the event. Currently only Google Drive attachments are supported.
In order to modify attachments the supportsAttachments request parameter should be set to true.
There can be at most 25 attachments per event,*/
	private static const string ATTACHMENTS = "attachments";
	import gcalendar.models.eventattachment;
	EventAttachment[] _attachments;
	mixin(GetterSetter!("EventAttachment[]", "Event")(ATTACHMENTS));

	/** The creator of the event. Read-only.*/
	private static const string CREATOR = "creator";
	public struct Creator {
		/** The creator's email address, if available.*/
		private static const string EMAIL = "email";
		@optional string _email;
		mixin(GetterSetter!("string", "Creator")(EMAIL));

		/** Whether the creator corresponds to the calendar on which this copy of the event appears. Read-only. The default is False.*/
		private static const string SELF = "self";
		bool _self;
		mixin(GetterSetter!("bool", "Creator")(SELF));

		/** The creator's Profile ID, if available. It corresponds to the id field in the People collection of the Google+ API*/
		private static const string ID = "id";
		@optional string _id;
		mixin(GetterSetter!("string", "Creator")(ID));

		/** The creator's name, if available.*/
		private static const string DISPLAYNAME = "displayName";
		@optional string _displayName;
		mixin(GetterSetter!("string", "Creator")(DISPLAYNAME));

	}

	/** Whether the end time is actually unspecified. An end time is still provided for compatibility reasons, even if this attribute is set to True. The default is False.*/
	private static const string ENDTIMEUNSPECIFIED = "endTimeUnspecified";
	bool _endTimeUnspecified;
	mixin(GetterSetter!("bool", "Event")(ENDTIMEUNSPECIFIED));

	/** The color of the event. This is an ID referring to an entry in the event section of the colors definition (see the  colors endpoint). Optional.*/
	private static const string COLORID = "colorId";
	@optional string _colorId;
	mixin(GetterSetter!("string", "Event")(COLORID));

	/** The conference-related information, such as details of a Google Meet conference. To create new conference details use the createRequest field. To persist your changes, remember to set the conferenceDataVersion request parameter to 1 for all event modification requests.*/
	private static const string CONFERENCEDATA = "conferenceData";
	import gcalendar.models.conferencedata;
	ConferenceData _conferenceData;
	mixin(GetterSetter!("ConferenceData", "Event")(CONFERENCEDATA));

	/** Sequence number as per iCalendar.*/
	private static const string SEQUENCE = "sequence";
	int _sequence;
	mixin(GetterSetter!("int", "Event")(SEQUENCE));

	/** Status of the event. Optional. Possible values are:  
- "confirmed" - The event is confirmed. This is the default status. 
- "tentative" - The event is tentatively confirmed. 
- "cancelled" - The event is cancelled (deleted). The list method returns cancelled events only on incremental sync (when syncToken or updatedMin are specified) or if the showDeleted flag is set to true. The get method always returns them.
A cancelled status represents two different states depending on the event type:  
- Cancelled exceptions of an uncancelled recurring event indicate that this instance should no longer be presented to the user. Clients should store these events for the lifetime of the parent recurring event.
Cancelled exceptions are only guaranteed to have values for the id, recurringEventId and originalStartTime fields populated. The other fields might be empty.  
- All other cancelled events represent deleted events. Clients should remove their locally synced copies. Such cancelled events will eventually disappear, so do not rely on them being available indefinitely.
Deleted events are only guaranteed to have the id field populated.   On the organizer's calendar, cancelled events continue to expose event details (summary, location, etc.) so that they can be restored (undeleted). Similarly, the events to which the user was invited and that they manually removed continue to provide details. However, incremental sync requests with showDeleted set to false will not return these details.
If an event changes its organizer (for example via the move operation) and the original organizer is not on the attendee list, it will leave behind a cancelled event where only the id field is guaranteed to be populated.*/
	private static const string STATUS = "status";
	@optional string _status;
	mixin(GetterSetter!("string", "Event")(STATUS));

	/** Geographic location of the event as free-form text. Optional.*/
	private static const string LOCATION = "location";
	@optional string _location;
	mixin(GetterSetter!("string", "Event")(LOCATION));

	/** List of RRULE, EXRULE, RDATE and EXDATE lines for a recurring event, as specified in RFC5545. Note that DTSTART and DTEND lines are not allowed in this field; event start and end times are specified in the start and end fields. This field is omitted for single events or instances of recurring events.*/
	private static const string RECURRENCE = "recurrence";
	string[] _recurrence;
	mixin(GetterSetter!("string[]", "Event")(RECURRENCE));

	/** The (inclusive) start time of the event. For a recurring event, this is the start time of the first instance.*/
	private static const string START = "start";
	EventDateTime _start;
	mixin(GetterSetter!("EventDateTime", "Event")(START));

	/** An absolute link to the Google+ hangout associated with this event. Read-only.*/
	private static const string HANGOUTLINK = "hangoutLink";
	string _hangoutLink;
	mixin(GetterSetter!("string", "Event")(HANGOUTLINK));

	/** Whether attendees other than the organizer can invite others to the event. Optional. The default is True.*/
	private static const string GUESTSCANINVITEOTHERS = "guestsCanInviteOthers";
	@optional bool _guestsCanInviteOthers;
	mixin(GetterSetter!("bool", "Event")(GUESTSCANINVITEOTHERS));

	/** Extended properties of the event.*/
	private static const string EXTENDEDPROPERTIES = "extendedProperties";
	public struct ExtendedProperties {
		/** Properties that are private to the copy of the event that appears on this calendar.*/
		private static const string PRIVATE = "private";
		string[string] _private;
		mixin(GetterSetter!("string[string]", "ExtendedProperties")(PRIVATE));

		/** Properties that are shared between copies of the event on other attendees' calendars.*/
		private static const string SHARED = "shared";
		string[string] _shared;
		mixin(GetterSetter!("string[string]", "ExtendedProperties")(SHARED));

	}

	/** Last modification time of the event (as a RFC3339 timestamp). Read-only.*/
	private static const string UPDATED = "updated";
	string _updated;
	mixin(GetterSetter!("string", "Event")(UPDATED));

	/** For an instance of a recurring event, this is the id of the recurring event to which this instance belongs. Immutable.*/
	private static const string RECURRINGEVENTID = "recurringEventId";
	string _recurringEventId;
	mixin(GetterSetter!("string", "Event")(RECURRINGEVENTID));

	/** Description of the event. Can contain HTML. Optional.*/
	private static const string DESCRIPTION = "description";
	@optional string _description;
	mixin(GetterSetter!("string", "Event")(DESCRIPTION));

	/** An absolute link to this event in the Google Calendar Web UI. Read-only.*/
	private static const string HTMLLINK = "htmlLink";
	string _htmlLink;
	mixin(GetterSetter!("string", "Event")(HTMLLINK));

	/** A gadget that extends this event. Gadgets are deprecated; this structure is instead only used for returning birthday calendar metadata.*/
	private static const string GADGET = "gadget";
	public struct Gadget {
		/** The gadget's width in pixels. The width must be an int greater than 0. Optional. Deprecated.*/
		private static const string WIDTH = "width";
		@optional int _width;
		mixin(GetterSetter!("int", "Gadget")(WIDTH));

		/** The gadget's display mode. Deprecated. Possible values are:  
- "icon" - The gadget displays next to the event's title in the calendar view. 
- "chip" - The gadget displays when the event is clicked.*/
		private static const string DISPLAY = "display";
		string _display;
		mixin(GetterSetter!("string", "Gadget")(DISPLAY));

		/** The gadget's title. Deprecated.*/
		private static const string TITLE = "title";
		string _title;
		mixin(GetterSetter!("string", "Gadget")(TITLE));

		/** Preferences.*/
		private static const string PREFERENCES = "preferences";
		string[string] _preferences;
		mixin(GetterSetter!("string[string]", "Gadget")(PREFERENCES));

		/** The gadget's URL. The URL scheme must be HTTPS. Deprecated.*/
		private static const string LINK = "link";
		string _link;
		mixin(GetterSetter!("string", "Gadget")(LINK));

		/** The gadget's height in pixels. The height must be an int greater than 0. Optional. Deprecated.*/
		private static const string HEIGHT = "height";
		@optional int _height;
		mixin(GetterSetter!("int", "Gadget")(HEIGHT));

		/** The gadget's icon URL. The URL scheme must be HTTPS. Deprecated.*/
		private static const string ICONLINK = "iconLink";
		string _iconLink;
		mixin(GetterSetter!("string", "Gadget")(ICONLINK));

		/** The gadget's type. Deprecated.*/
		private static const string TYPE = "type";
		string _type;
		mixin(GetterSetter!("string", "Gadget")(TYPE));

	}

}
